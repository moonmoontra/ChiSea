import streamlit as st
import numpy as np
import pandas as pd
import random
from collections import defaultdict
import json
import os


class SeatingArrangement:
    def __init__(self, students):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ —Å–ø–∏—Å–∫–æ–º —ñ–º–µ–Ω —É—á–Ω—ñ–≤
        """
        self.students = students
        self.num_students = len(students)
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –∫–æ–∂–Ω–æ–≥–æ —É—á–Ω—è
        self.preferences = {}
        # –ú–∞—Ç—Ä–∏—Ü—è –≤–∞–≥ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        self.weight_matrix = np.zeros((self.num_students, self.num_students))
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è, —Ö—Ç–æ –∑ –∫–∏–º —Å–∏–¥—ñ–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º
        self.recent_seatings = defaultdict(set)

    def add_student_preferences(self, student, preferences, weights=None):
        """
        –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥ –¥–ª—è —É—á–Ω—è
        student: —ñ–º'—è —É—á–Ω—è
        preferences: —Å–ø–∏—Å–æ–∫ –∑ 4 —ñ–º–µ–Ω —É—á–Ω—ñ–≤ —É –ø–æ—Ä—è–¥–∫—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
        weights: –≤–∞–≥–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º [4, 3, 2, 1]
        """
        if weights is None:
            weights = [4, 3, 2, 1]

        if len(preferences) != 4:
            raise ValueError("–ö–æ–∂–µ–Ω —É—á–µ–Ω—å –º–∞—î –Ω–∞–¥–∞—Ç–∏ 4 –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏")

        self.preferences[student] = preferences

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –≤–∞–≥
        student_idx = self.students.index(student)
        for pref, weight in zip(preferences, weights):
            if pref in self.students:
                pref_idx = self.students.index(pref)
                self.weight_matrix[student_idx, pref_idx] = weight

    def update_recent_seatings(self, arrangement):
        """
        –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—Å–∞–¥–∫–∏
        arrangement: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —É—á–Ω—ñ–≤
        """
        for pair in arrangement:
            if len(pair) == 2:  # –ü–∞—Ä–∞ —É—á–Ω—ñ–≤
                student1, student2 = pair
                self.recent_seatings[student1].add(student2)
                self.recent_seatings[student2].add(student1)

        # –õ—ñ–º—ñ—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ä–æ–∑—Å–∞–¥–∂–µ–Ω—å, —è–∫—ñ –º–∏ –ø–∞–º'—è—Ç–∞—î–º–æ
        for student in self.students:
            if len(self.recent_seatings[student]) > 3:  # –ø–∞–º'—è—Ç–∞—î–º–æ 3 –æ—Å—Ç–∞–Ω–Ω—ñ —Ç–∏–∂–Ω—ñ
                self.recent_seatings[student] = set(list(self.recent_seatings[student])[-3:])

    def compute_seating_score(self, pair):
        """
        –û–±—á–∏—Å–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –¥–ª—è –ø–∞—Ä–∏ —É—á–Ω—ñ–≤
        """
        student1, student2 = pair
        idx1 = self.students.index(student1)
        idx2 = self.students.index(student2)

        # –û—Å–Ω–æ–≤–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
        score = self.weight_matrix[idx1, idx2] + self.weight_matrix[idx2, idx1]

        # –®—Ç—Ä–∞—Ñ, —è–∫—â–æ —É—á–Ω—ñ –≤–∂–µ —Å–∏–¥—ñ–ª–∏ —Ä–∞–∑–æ–º –Ω–µ—â–æ–¥–∞–≤–Ω–æ
        if student2 in self.recent_seatings[student1]:
            score -= 5

        return score

    def optimize_seating(self):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Å–∞–¥–∫–∏ —É—á–Ω—ñ–≤
        """
        available_students = set(self.students)
        arrangement = []

        # –°–ø–æ—á–∞—Ç–∫—É —Ñ–æ—Ä–º—É—î–º–æ –º–æ–∂–ª–∏–≤—ñ –ø–∞—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ —ó—Ö –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é
        all_possible_pairs = []
        for i, student1 in enumerate(self.students):
            for j, student2 in enumerate(self.students[i + 1:], i + 1):
                score = self.compute_seating_score((student1, student2))
                all_possible_pairs.append((student1, student2, score))

        # –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä–∏ –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é (–≤—ñ–¥ –≤–∏—â–æ—ó –¥–æ –Ω–∏–∂—á–æ—ó)
        all_possible_pairs.sort(key=lambda x: x[2], reverse=True)

        # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å, —â–æ–± –Ω–µ –±—É–ª–æ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–º
        random.shuffle(all_possible_pairs[:len(all_possible_pairs) // 3])

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—Å–∞–¥–∫—É
        for student1, student2, score in all_possible_pairs:
            if student1 in available_students and student2 in available_students:
                arrangement.append((student1, student2))
                available_students.remove(student1)
                available_students.remove(student2)

        # –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–≤—Å—è –Ω–µ–ø–∞—Ä–Ω–∏–π —É—á–µ–Ω—å, –≤—ñ–Ω —Å–∏–¥–∏—Ç—å —Å–∞–º
        if available_students:
            arrangement.append((list(available_students)[0],))

        return arrangement

    def generate_new_arrangement(self):
        """
        –ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤—É —Ä–æ–∑—Å–∞–¥–∫—É, –æ–Ω–æ–≤–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        arrangement = self.optimize_seating()
        self.update_recent_seatings(arrangement)
        return arrangement


def save_data(students, preferences, history):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ —É —Ñ–∞–π–ª"""
    data = {
        "students": students,
        "preferences": preferences,
        "history": history
    }

    with open("class_data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def load_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É"""
    if os.path.exists("class_data.json"):
        with open("class_data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        return data["students"], data["preferences"], data["history"]
    return [], {}, []


def process_csv(csv_file):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π CSV —Ñ–∞–π–ª –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ —É—á–Ω—ñ–≤"""
    try:
        df = pd.read_csv(csv_file, encoding='utf-8')

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—É
        if '–Ü–º\'—è' not in df.columns and df.shape[1] >= 5:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ "–Ü–º'—è", –∞–ª–µ —î 5 –∫–æ–ª–æ–Ω–æ–∫, –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –ø–µ—Ä—à–∞ –∫–æ–ª–æ–Ω–∫–∞ - —ñ–º–µ–Ω–∞
            df.columns = ['–Ü–º\'—è', '1', '2', '3', '4']

        if '–Ü–º\'—è' not in df.columns or '1' not in df.columns or '2' not in df.columns or '3' not in df.columns or '4' not in df.columns:
            return False, "–§–∞–π–ª –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–ª–æ–Ω–∫–∏: '–Ü–º'—è', '1', '2', '3', '4'", None, None

        # –í–∏—Ç—è–≥—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤
        students = df['–Ü–º\'—è'].tolist()

        # –í–∏—Ç—è–≥—É—î–º–æ –ø–µ—Ä–µ–≤–∞–≥–∏
        preferences = {}
        for _, row in df.iterrows():
            student = row['–Ü–º\'—è']
            prefs = [row['1'], row['2'], row['3'], row['4']]
            preferences[student] = prefs

        return True, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", students, preferences
    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}", None, None


# Streamlit –¥–æ–¥–∞—Ç–æ–∫
st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∞–¥–∫–∏ —É—á–Ω—ñ–≤", layout="wide")

st.title("üè´ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Å–∞–¥–∫–∏ —É—á–Ω—ñ–≤")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
saved_students, saved_preferences, saved_history = load_data()

# Sidebar –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º —É—á–Ω—ñ–≤
with st.sidebar:
    st.header("üìã –°–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ –∫–ª–∞—Å—É")

    # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —É—á–Ω—ñ–≤
    students_text = st.text_area(
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞ —É—á–Ω—ñ–≤ (–∫–æ–∂–Ω–µ —ñ–º'—è –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞):",
        "\n".join(saved_students) if saved_students else "",
        height=200
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —É—á–Ω—ñ–≤
    if st.button("–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤"):
        students = [name.strip() for name in students_text.split("\n") if name.strip()]
        st.success(f"–°–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ! –£—Å—å–æ–≥–æ —É—á–Ω—ñ–≤: {len(students)}")
        # –û—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å–∫–ª–∞–¥—É –∫–ª–∞—Å—É
        saved_history = []
        saved_preferences = {}
        save_data(students, saved_preferences, saved_history)
    else:
        students = saved_students if saved_students else []

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
    st.subheader("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ CSV")
    uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –∑ CSV —Ñ–∞–π–ª—É", type="csv")

    if uploaded_file is not None:
        success, message, csv_students, csv_preferences = process_csv(uploaded_file)

        if success:
            st.success(message)

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ CSV
            if st.button("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ CSV"):
                saved_students = csv_students
                saved_preferences = csv_preferences
                # –û—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
                saved_history = []
                save_data(saved_students, saved_preferences, saved_history)
                st.success("–î–∞–Ω—ñ –∑ CSV —Ñ–∞–π–ª—É —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ!")
                st.rerun()
        else:
            st.error(message)

    # –ö–Ω–æ–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –ø–æ—Ç–æ—á–Ω–∏—Ö –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ —É CSV
    if saved_students and saved_preferences:
        st.subheader("üì• –ï–∫—Å–ø–æ—Ä—Ç —É CSV")
        if st.button("–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –≤ CSV"):
            data = []
            for student in saved_students:
                if student in saved_preferences:
                    prefs = saved_preferences[student]
                    data.append([student] + prefs)
                else:
                    data.append([student, "", "", "", ""])

            df_export = pd.DataFrame(data, columns=["–Ü–º'—è", "1", "2", "3", "4"])
            csv = df_export.to_csv(index=False).encode('utf-8')

            st.download_button(
                "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV —Ñ–∞–π–ª",
                csv,
                "priorities.csv",
                "text/csv",
                key='download-priorities-csv'
            )

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3 = st.tabs(["–ü–µ—Ä–µ–≤–∞–≥–∏ —É—á–Ω—ñ–≤", "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—Å–∞–¥–∫—É", "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Å–∞–¥–æ–∫"])

# –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥ —É—á–Ω—ñ–≤
with tab1:
    st.header("üîÑ –í–Ω–µ—Å—ñ—Ç—å –ø–µ—Ä–µ–≤–∞–≥–∏ —É—á–Ω—ñ–≤")

    if not students:
        st.warning("–°–ø–µ—Ä—à—É –¥–æ–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ —É –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ")
    else:
        col1, col2 = st.columns(2)

        with col1:
            # –í–∏–±—ñ—Ä —É—á–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥
            student_to_edit = st.selectbox(
                "–í–∏–±–µ—Ä—ñ—Ç—å —É—á–Ω—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥:",
                students
            )

            other_students = [s for s in students if s != student_to_edit]

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ (—è–∫—â–æ —î)
            current_prefs = saved_preferences.get(student_to_edit, [])

            # –í–∏–±—ñ—Ä –æ–¥–Ω–æ–∫–ª–∞—Å–Ω–∏–∫—ñ–≤ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
            pref1 = st.selectbox(
                "1-–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (–Ω–∞–π–±—ñ–ª—å—à–µ –±–∞–∂–∞–Ω–Ω—è):",
                [""] + other_students,
                index=other_students.index(current_prefs[0]) + 1 if current_prefs and len(current_prefs) > 0 and
                                                                    current_prefs[0] in other_students else 0
            )

            remaining_students1 = [s for s in other_students if s != pref1]
            pref2 = st.selectbox(
                "2-–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:",
                [""] + remaining_students1,
                index=remaining_students1.index(current_prefs[1]) + 1 if current_prefs and len(current_prefs) > 1 and
                                                                         current_prefs[1] in remaining_students1 else 0
            )

            remaining_students2 = [s for s in remaining_students1 if s != pref2]
            pref3 = st.selectbox(
                "3-–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:",
                [""] + remaining_students2,
                index=remaining_students2.index(current_prefs[2]) + 1 if current_prefs and len(current_prefs) > 2 and
                                                                         current_prefs[2] in remaining_students2 else 0
            )

            remaining_students3 = [s for s in remaining_students2 if s != pref3]
            pref4 = st.selectbox(
                "4-–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:",
                [""] + remaining_students3,
                index=remaining_students3.index(current_prefs[3]) + 1 if current_prefs and len(current_prefs) > 3 and
                                                                         current_prefs[3] in remaining_students3 else 0
            )

            if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–µ–≤–∞–≥–∏"):
                preferences = [p for p in [pref1, pref2, pref3, pref4] if p]
                if len(preferences) != 4:
                    st.error("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ 4 —Ä—ñ–∑–Ω–∏—Ö —É—á–Ω—ñ–≤!")
                else:
                    saved_preferences[student_to_edit] = preferences
                    save_data(students, saved_preferences, saved_history)
                    st.success(f"–ü–µ—Ä–µ–≤–∞–≥–∏ –¥–ª—è {student_to_edit} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

        with col2:
            st.subheader("–ü–æ—Ç–æ—á–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏")

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –≤–∂–µ –≤–≤–µ–¥–µ–Ω–∏—Ö –ø–µ—Ä–µ–≤–∞–≥
            prefs_data = []
            for s in students:
                if s in saved_preferences:
                    prefs_data.append([s] + saved_preferences[s])
                else:
                    prefs_data.append([s, "", "", "", ""])

            df = pd.DataFrame(
                prefs_data,
                columns=["–£—á–µ–Ω—å", "1-–π –≤–∏–±—ñ—Ä", "2-–π –≤–∏–±—ñ—Ä", "3-–π –≤–∏–±—ñ—Ä", "4-–π –≤–∏–±—ñ—Ä"]
            )
            st.dataframe(df, use_container_width=True)

            # –ü–æ–≤–Ω–æ—Ç–∞ –¥–∞–Ω–∏—Ö
            complete = len(saved_preferences) == len(students)
            st.progress(len(saved_preferences) / max(1, len(students)))
            if complete:
                st.success(f"–î–∞–Ω—ñ –ø–æ–≤–Ω—ñ! –í—Å—ñ {len(students)} —É—á–Ω—ñ–≤ –≤–Ω–µ—Å–ª–∏ –ø–µ—Ä–µ–≤–∞–≥–∏.")
            else:
                st.info(f"–í–Ω–µ—Å–µ–Ω–æ {len(saved_preferences)} –∑ {len(students)} —É—á–Ω—ñ–≤")

# –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∞–¥–∫–∏
with tab2:
    st.header("ü™ë –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∞–¥–∫–∏")

    if not students:
        st.warning("–°–ø–µ—Ä—à—É –¥–æ–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ —É –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ")
    elif len(saved_preferences) < len(students):
        st.warning("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–∞–≥–∏ –¥–ª—è –≤—Å—ñ—Ö —É—á–Ω—ñ–≤")
    else:
        st.subheader("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó —Ä–æ–∑—Å–∞–¥–∫–∏")

        # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        with st.expander("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—É"):
            randomness = st.slider(
                "–†—ñ–≤–µ–Ω—å –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ (0-100%)",
                min_value=0,
                max_value=100,
                value=30,
                help="–ß–∏–º –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–∏–º –±—ñ–ª—å—à–∞ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å –ø—Ä–∏ —Ä–æ–∑—Å–∞–¥—Ü—ñ"
            )

            penalty = st.slider(
                "–®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Ä–æ–∑—Å–∞–¥–∫–∏ (1-10)",
                min_value=1,
                max_value=10,
                value=5,
                help="–ß–∏–º –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–∏–º –º–µ–Ω—à–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å, —â–æ —É—á–Ω—ñ —Å–∏–¥—ñ—Ç–∏–º—É—Ç—å —Ä–∞–∑–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            )

        if st.button("–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ä–æ–∑—Å–∞–¥–∫—É", type="primary"):
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—Å–∞–¥–∫—É
            seating = SeatingArrangement(students)

            # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥–∏
            for student, prefs in saved_preferences.items():
                seating.add_student_preferences(student, prefs)

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—Å–∞–¥–æ–∫
            for past_arrangement in saved_history:
                seating.update_recent_seatings(past_arrangement)


            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            # –ó–º—ñ–Ω—é—î–º–æ —Ä—ñ–≤–µ–Ω—å –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ
            def optimize_seating_custom(self):
                available_students = set(self.students)
                arrangement = []

                # –°–ø–æ—á–∞—Ç–∫—É —Ñ–æ—Ä–º—É—î–º–æ –º–æ–∂–ª–∏–≤—ñ –ø–∞—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ —ó—Ö –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é
                all_possible_pairs = []
                for i, student1 in enumerate(self.students):
                    for j, student2 in enumerate(self.students[i + 1:], i + 1):
                        score = self.compute_seating_score((student1, student2))
                        all_possible_pairs.append((student1, student2, score))

                # –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä–∏ –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é (–≤—ñ–¥ –≤–∏—â–æ—ó –¥–æ –Ω–∏–∂—á–æ—ó)
                all_possible_pairs.sort(key=lambda x: x[2], reverse=True)

                # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å, —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Ä–æ–∑—Å–∞–¥–∫–∏
                shuffle_count = int(len(all_possible_pairs) * randomness / 100)
                random.shuffle(all_possible_pairs[:max(1, shuffle_count)])

                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—Å–∞–¥–∫—É
                for student1, student2, score in all_possible_pairs:
                    if student1 in available_students and student2 in available_students:
                        arrangement.append((student1, student2))
                        available_students.remove(student1)
                        available_students.remove(student2)

                # –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–≤—Å—è –Ω–µ–ø–∞—Ä–Ω–∏–π —É—á–µ–Ω—å, –≤—ñ–Ω —Å–∏–¥–∏—Ç—å —Å–∞–º
                if available_students:
                    arrangement.append((list(available_students)[0],))

                return arrangement


            # –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —à—Ç—Ä–∞—Ñ–æ–º
            def compute_seating_score_custom(self, pair):
                student1, student2 = pair
                idx1 = self.students.index(student1)
                idx2 = self.students.index(student2)

                # –û—Å–Ω–æ–≤–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
                score = self.weight_matrix[idx1, idx2] + self.weight_matrix[idx2, idx1]

                # –®—Ç—Ä–∞—Ñ, —è–∫—â–æ —É—á–Ω—ñ –≤–∂–µ —Å–∏–¥—ñ–ª–∏ —Ä–∞–∑–æ–º –Ω–µ—â–æ–¥–∞–≤–Ω–æ
                if student2 in self.recent_seatings[student1]:
                    score -= penalty

                return score


            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –º–µ—Ç–æ–¥–∏
            seating.optimize_seating = lambda: optimize_seating_custom(seating)
            seating.compute_seating_score = lambda pair: compute_seating_score_custom(seating, pair)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—É —Ä–æ–∑—Å–∞–¥–∫—É
            new_arrangement = seating.generate_new_arrangement()

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            saved_history.append(new_arrangement)
            save_data(students, saved_preferences, saved_history)

            st.success("–ù–æ–≤—É —Ä–æ–∑—Å–∞–¥–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –Ω–æ–≤—É —Ä–æ–∑—Å–∞–¥–∫—É
            st.subheader("–†–æ–∑—Å–∞–¥–∫–∞ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:")

            seating_data = []
            for i, pair in enumerate(new_arrangement, 1):
                if len(pair) == 2:
                    seating_data.append([i, pair[0], pair[1]])
                else:
                    seating_data.append([i, pair[0], "---"])

            df = pd.DataFrame(seating_data, columns=["–ü–∞—Ä—Ç–∞", "–£—á–µ–Ω—å 1", "–£—á–µ–Ω—å 2"])
            st.dataframe(df, use_container_width=True)

            # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑—Å–∞–¥–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ —Å—Ö–µ–º–∏ –∫–ª–∞—Å—É
            st.subheader("–°—Ö–µ–º–∞ —Ä–æ–∑—Å–∞–¥–∫–∏ —É –∫–ª–∞—Å—ñ")

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—ñ—Ç–∫—É –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
            max_rows = 5  # 4 –ø–∞—Ä—Ç–∏ –≤ —Ä—è–¥

            # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–µ–º—É –∫–ª–∞—Å—É
            desk_html = "<div style='text-align:center; margin-bottom:20px;'><strong>–í–ß–ò–¢–ï–õ–¨</strong></div>"
            desk_html += "<div style='display:flex; justify-content:center;'>"
            desk_html += "<div style='border:2px solid black; padding:10px; text-align:center; margin:5px;'>–î–æ—à–∫–∞</div>"
            desk_html += "</div><br>"

            for row in range(max_rows):
                desk_html += "<div style='display:flex; justify-content:center;'>"
                for col in range(3):
                    desk_idx = row * 3 + col
                    if desk_idx < len(new_arrangement):
                        pair = new_arrangement[desk_idx]
                        if len(pair) == 2:
                            desk_html += f"<div style='border:2px solid #4285F4; color: black; padding:10px; width:150px; height:80px; margin:10px; text-align:center; background-color:#E8F0FE; border-radius:5px;'>"
                            desk_html += f"<div>{pair[0]}</div><hr style='margin:5px 0;'><div>{pair[1]}</div>"
                        else:
                            desk_html += f"<div style='border:2px solid #4285F4; padding:10px; width:150px; height:80px; margin:10px; text-align:center; background-color:#E8F0FE; border-radius:5px;'>"
                            desk_html += f"<div>{pair[0]}</div><hr style='margin:5px 0;'><div>---</div>"
                        desk_html += "</div>"
                desk_html += "</div>"

            st.markdown(desk_html, unsafe_allow_html=True)

            # –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –µ–∫—Å–ø–æ—Ä—Ç—É
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑—Å–∞–¥–∫—É —è–∫ CSV",
                csv,
                "roz—Åadka.csv",
                "text/csv",
                key='download-csv'
            )

# –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—Å–∞–¥–æ–∫
with tab3:
    st.header("üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Å–∞–¥–æ–∫")

    if not saved_history:
        st.info("–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Å–∞–¥–æ–∫ –ø–æ—Ä–æ–∂–Ω—è")
    else:
        for week, arrangement in enumerate(saved_history, 1):
            with st.expander(f"–¢–∏–∂–¥–µ–Ω—å {week}"):
                seating_data = []
                for i, pair in enumerate(arrangement, 1):
                    if len(pair) == 2:
                        seating_data.append([i, pair[0], pair[1]])
                    else:
                        seating_data.append([i, pair[0], "---"])

                df = pd.DataFrame(seating_data, columns=["–ü–∞—Ä—Ç–∞", "–£—á–µ–Ω—å 1", "–£—á–µ–Ω—å 2"])
                st.dataframe(df, use_container_width=True)

        if st.button("–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"):
            saved_history = []
            save_data(students, saved_preferences, saved_history)
            st.success("–Ü—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—Å–∞–¥–æ–∫ –æ—á–∏—â–µ–Ω–æ!")
            st.rerun()
